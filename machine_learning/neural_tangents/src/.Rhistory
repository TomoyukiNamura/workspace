ylim = c(0,10)
sigma_e = 0.1
t_st = 100
t_ed = 2000
t_intv = 10
# 人工データ作成
t = seq(t_st, t_ed, t_intv)
#y = log(t) + rnorm(length(t))*sigma_e
y = 4 + t/500 + rnorm(length(t))*sigma_e
plot(t, y, type="l", ylim=ylim)
# # 補修を入れる
# st = 500
# y[st:length(y)] = y[st:length(y)]+2
# plot(t, y, type="l", ylim=ylim)
# ラグデータ作成
y_t0 = y[1:(length(y)-1)]
y_t1 = y[2:length(y)]
data = data.frame(y_t1, y_t0);head(data);plot(y_t0, y_t1, col=2, ylim=ylim)
# 自己回帰モデル作成
model = lm(y_t1~y_t0, data=data)
summary(model)
abline(model)
# 訓練データの予測結果
plot(t, y, type="l", ylim=ylim)
par(new=T)
plot(t, c(y_t0[1],predict(model)), type="l",col=2, ylim=ylim)
#
t_test = t
y_test = y
t_last = t[length(t)]
y_last = y[length(y)-10]
tmp_data = data.frame(y_t1=NA, y_t0=y_last)
#tmp_data = data.frame(y_t1=NA, y_t0=10)
for(i in 1:20000){
tmp_data[i+1,"y_t0"] <- predict(model, newdata=tmp_data[i,])
t_test <- c(t_test, t_last+i)
y_test <- c(y_test, tmp_data[i+1,"y_t0"])
}
#
t_test = t
y_test = y
t_last = t[length(t)]
y_last = y[length(y)-10]
tmp_data = data.frame(y_t1=NA, y_t0=y_last)
#tmp_data = data.frame(y_t1=NA, y_t0=10)
for(i in 1:1000){
tmp_data[i+1,"y_t0"] <- predict(model, newdata=tmp_data[i,])
t_test <- c(t_test, t_last+i)
y_test <- c(y_test, tmp_data[i+1,"y_t0"])
}
plot(t_test, y_test, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)), col=2)
par(new=T)
plot(t, y, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)))
curve(func(x,beta ,alpha,10),xlim=c(0,100))
beta
alpha =  model$coefficients[1]
beta = model$coefficients[2]
func <- function(x,beta,alpha,init){
result = init*beta^x + alpha*(1+((beta^(x-2)-1)/(beta-1)))
return(result)
}
func <- function(x,beta,alpha,init){
result = init*beta^x + alpha*(1+((beta^(x-2)-1)/(beta-1)))
return(result)
}
curve(func(x,beta ,alpha,10),xlim=c(0,100))
plot(t_test, y_test, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)), col=2)
par(new=T)
plot(t, y, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)))
curve(func(x,beta ,alpha,10),xlim=c(0,100), ylim=ylim)
curve(func(x,beta ,alpha,10),xlim=c(0,10000), ylim=ylim)
alpha * ((2-beta)/(1-beta))
func(1000,beta ,alpha,10)
func(100000,beta ,alpha,10)
func(100000,beta ,alpha,-100)
curve(func(x,beta ,alpha,-10),xlim=c(0,10000), ylim=ylim)
curve(func(x,beta ,alpha,100),xlim=c(0,10000), ylim=ylim)
#
t_test = t
y_test = y
t_last = t[length(t)]
y_last = y[length(y)-10]
tmp_data = data.frame(y_t1=NA, y_t0=y_last)
#tmp_data = data.frame(y_t1=NA, y_t0=10)
for(i in 1:1000){
tmp_data[i+1,"y_t0"] <- predict(model, newdata=tmp_data[i,])
t_test <- c(t_test, t_last+i)
y_test <- c(y_test, tmp_data[i+1,"y_t0"])
}
plot(t_test, y_test, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)), col=2)
par(new=T)
plot(t, y, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)))
t_test[3000]
t_test[2999]
t_test[2980]
t_test[2500]
y_test
y_test[length(y_test)]
# ラグデータ作成
y_t0 = y[1:(length(y)-2)]
y_t1 = y[2:length(y)-1]
y_t2 = y[3:length(y)]
data = data.frame(y_t2, y_t1, y_t0);head(data);plot(y_t0, y_t1, col=2, ylim=ylim)
# コンフィグ
ylim = c(0,10)
sigma_e = 0.1
t_st = 100
t_ed = 2000
t_intv = 10
# 人工データ作成
t = seq(t_st, t_ed, t_intv)
#y = log(t) + rnorm(length(t))*sigma_e
y = 4 + t/500 + rnorm(length(t))*sigma_e
plot(t, y, type="l", ylim=ylim)
# # 補修を入れる
# st = 500
# y[st:length(y)] = y[st:length(y)]+2
# plot(t, y, type="l", ylim=ylim)
y_t0 = y[1:(length(y)-2)]
y_t0
y_t1 = y[2:length(y)-1]
y_t2 = y[3:length(y)]
y_t2
data = data.frame(y_t2, y_t1, y_t0)
# ラグデータ作成
y_t0 = y[1:(length(y)-2)]
y_t1 = y[2:(length(y)-1)]
y_t2 = y[3:length(y)]
data = data.frame(y_t2, y_t1, y_t0)
data
data = data.frame(y_t2, y_t1, y_t0);head(data);plot(y_t0, y_t1, col=2, ylim=ylim)
model = lm(y_t2~y_t1+y_t0, data=data)
summary(model)
abline(model)
plot(t, y, type="l", ylim=ylim)
par(new=T)
predict(model)
length(predict(model))
data = data.frame(y_t2, y_t1, y_t0);head(data)
length(t)
plot(t, c(y_t0[1],y_t1[1],predict(model)), type="l",col=2, ylim=ylim)
#
t_test = t
y_test = y
y_test
t_last = t[length(t)]
y_last = y[length(y)]
y[length(y)-1]
y[length(y)]
y_last_m1 = y[length(y)-1]
y_last = y[length(y)]
t_last = t[length(t)]
y_last_m1 = y[length(y)-1]
y_last = y[length(y)]
tmp_data = data.frame(y_t2=NA, y_t1=y_last, y_t0=y_last_m1)
i=0
predict(model, newdata=tmp_data[i,])
tmp_data
tmp_data[i,]
i
i=1
predict(model, newdata=tmp_data[i,])
tmp_data
tmp_data[i,]
tmp_data[i+1,"y_t0"] <- tmp_data[i,"y_t1"]
tmp_data[i+1,"y_t1"] <- predict(model, newdata=tmp_data[i,])
tmp_data
t_test <- c(t_test, t_last+i)
t_test
y_test
tmp_data[i+1,"y_t1"]
tmp_data
y_test
tmp_data = data.frame(y_t2=NA, y_t1=y_last, y_t0=y_last_m1)
#tmp_data = data.frame(y_t1=NA, y_t0=10)
for(i in 1:1000){
tmp_data[i+1,"y_t0"] <- tmp_data[i,"y_t1"]
tmp_data[i+1,"y_t1"] <- predict(model, newdata=tmp_data[i,])
t_test <- c(t_test, t_last+i)
y_test <- c(y_test, tmp_data[i+1,"y_t1"])
}
#
t_test = t
y_test = y
t_last = t[length(t)]
y_last_m1 = y[length(y)-1]
y_last = y[length(y)]
tmp_data = data.frame(y_t2=NA, y_t1=y_last, y_t0=y_last_m1)
#tmp_data = data.frame(y_t1=NA, y_t0=10)
for(i in 1:1000){
tmp_data[i+1,"y_t0"] <- tmp_data[i,"y_t1"]
tmp_data[i+1,"y_t1"] <- predict(model, newdata=tmp_data[i,])
t_test <- c(t_test, t_last+i)
y_test <- c(y_test, tmp_data[i+1,"y_t1"])
}
plot(t_test, y_test, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)), col=2)
plot(t_test, y_test, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)), col=2)
par(new=T)
plot(t, y, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)))
ylim
ylim=c(200)
plot(t_test, y_test, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)), col=2)
ylim
ylim=c(0,200)
plot(t_test, y_test, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)), col=2)
ylim=c(0,200)
ylim=c(0,20)
plot(t_test, y_test, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)), col=2)
model
#
t_test = t
y_test = y
t_last = t[length(t)]
y_last_m1 = y[length(y)-1]
y_last = y[length(y)]
tmp_data = data.frame(y_t2=NA, y_t1=y_last, y_t0=y_last_m1)
#tmp_data = data.frame(y_t1=NA, y_t0=10)
for(i in 1:10000){
tmp_data[i+1,"y_t0"] <- tmp_data[i,"y_t1"]
tmp_data[i+1,"y_t1"] <- predict(model, newdata=tmp_data[i,])
t_test <- c(t_test, t_last+i)
y_test <- c(y_test, tmp_data[i+1,"y_t1"])
}
plot(t_test, y_test, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)), col=2)
par(new=T)
plot(t, y, type="l", ylim=ylim, xlim=c(min(t_test),max(t_test)))
ts
w<-ts(rnorm(300))
plot(w)
w
install.packages("Amelia")
data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1)
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1)
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
data <- data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
data[1,"x"] = NA
data
library(Amelia)
# テストデータの一部を欠損させる
data[1,"x"] = NA
set.seed(1)
a.out<-amelia(data, m = 5)
amelia
Amelia
help()
help(Amelia)
help("Amelia")
help(??Amelia)
library(Amelia)
library("Amelia")
install.packages("Amelia")
library("Amelia")
amelia
# テストデータ
data <- data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
# テストデータの一部を欠損させる
data[1,"x"] = NA
set.seed(1)
a.out<-amelia(data, m = 5)
a.out
data
a.out<-amelia(data, m = 5)
a.out<-amelia(data, m = 10)
#install.packages("Amelia")
library("Amelia")
# テストデータ
data <- data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
# テストデータの一部を欠損させる
data[1,"x"] = NA
data[3,"y"] = NA
# amelia
set.seed(1)
a.out<-amelia(data, m = 10)
write.amelia(obj= a.out, file.stem = "outdata", orig.data = F,separate = F)
getwd()
help(amelia)
a.out
str(a.out)
str(a.out$imputations)
a.out$imputations
a.out$imputations$imp1
a.out$imputations
a.out
# テストデータ
data <- data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
# テストデータの一部を欠損させる
data[1,"x"] = NA
data[3,"y"] = NA
# amelia
set.seed(1)
a.out<-amelia(data, m = 10)
write.amelia(obj= a.out, file.stem = "outdata", orig.data = F,separate = F)
str(a.out)
a.out$imputations$imp1
a.out$imputations
a.out
# R version 3.3.2 (2016-10-31)
#install.packages("Amelia")
library("Amelia")
# テストデータ
data <- data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
# テストデータの一部を欠損させる
data[1,"x"] = NA
data[3,"y"] = NA
# amelia
set.seed(1)
a.out<-amelia(data, m = 10)
write.amelia(obj= a.out, file.stem = "outdata", orig.data = F,separate = F)
str(a.out)
a.out$imputations$imp1
getwd()
str(data_imputed)
# R version 3.3.2 (2016-10-31)
#install.packages("Amelia")
library("Amelia")
# テストデータ
data <- data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
# テストデータの一部を欠損させる
data[1,"x"] = NA
data[3,"y"] = NA
# amelia
set.seed(1)
data_imputed <- amelia(data, m = 10)
str(data_imputed)
data_imputed$imputations$imp1
str(data_imputed)
data_imputed$imputations$imp1
data_imputed$imputations
data_imputed
data_imputed <- amelia(data, m = 10, p2s = 1)
data_imputed <- amelia(data, m = 10, p2s = 2)
data_imputed$imputations
data_imputed
# amelia
set.seed(1)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
# amelia
set.seed(1)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
# amelia
set.seed(1)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
# amelia
set.seed(10)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
# amelia
set.seed(10)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10, # ブートストラップ標本抽出による欠損補完を行う回数
max.resample = 1)# ブートストラップ標本抽出による欠損補完を行う回数
# R version 3.3.2 (2016-10-31)
#install.packages("Amelia")
library("Amelia")
# テストデータ
data <- data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
# テストデータの一部を欠損させる
data[1,"x"] = NA
data[3,"y"] = NA
# amelia
set.seed(10)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10) # ブートストラップ標本抽出による欠損補完を行う回数
data_imputed$imputations
data_imputed$imputations
data_imputed$imputations$imp4 # 特定の欠損補完結果(4回目)を表示
data_imputed$imputations # m回の欠損補完結果を表示
data_imputed$imputations # m回の欠損補完結果を表示
str(data_imputed)
library("Amelia")
install.packages("Amelia")
library("Amelia")
# テストデータ
data <- data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
# テストデータの一部を欠損させる
data[1,"x"] = NA
data[3,"y"] = NA
# EMB実行
set.seed(10) # シード固定(なくてもいい)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10) # ブートストラップ標本抽出による欠損補完を行う回数
# EMB実行
set.seed(10) # シード固定(なくてもいい)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10) # ブートストラップ標本抽出による欠損補完を行う回数
# EMB実行
set.seed(10) # シード固定(なくてもいい)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10) # ブートストラップ標本抽出による欠損補完を行う回数
data_imputed$imputations # m回の欠損補完結果を表示
data_imputed$imputations$imp4 # 特定の欠損補完結果(4回目)を表示
# 実行環境：R version 3.3.2 (2016-10-31)　→　正常な動作確認
# 実行環境：R version 3.5.1 (2018-07-02)　→　正常な動作確認
#install.packages("Amelia")
library("Amelia")
# テストデータ
data <- data.frame(
x = c(0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1),
y = c(1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1)
)
# テストデータの一部を欠損させる
data[1,"x"] = NA
data[3,"y"] = NA
# EMB実行
set.seed(10) # シード固定(なくてもいい)
data_imputed <- amelia(data,   # 欠損ありデータ（data.frame形式）
m = 10) # ブートストラップ標本抽出による欠損補完を行う回数
# EMBによる欠損補完結果
data_imputed$imputations # m回の欠損補完結果を表示
data_imputed$imputations$imp4 # 特定の欠損補完結果(4回目)を表示
curve(-(x-5)^2)
curve(-(x-5)^2, xlim=c(-10,10))
curve(-(x-5)^2, xlim=c(-10,10))
curve(-(x-5)^2, xlim=c(-50,50))
curve(-(x-5)^2, xlim=c(-100,100))
curve(-(x-100)^2, xlim=c(-100,100))
curve(-(x+100)^2, xlim=c(-100,100))
curve(-(x-100)^2-(x+100)^2, xlim=c(-100,100))
curve(-(x-100000)^2-(x+100000)^2, xlim=c(-100,100))
curve(-(x-100000)^2-(x+30000)^2, xlim=c(-100,100))
curve(-(x-100)^2-(x+300)^2, xlim=c(-100,100))
curve(-(x-100)^2-(x+30)^2, xlim=c(-100,100))
library(bnlearn)
#パッケージ読み込み
install.packages(Rgraphviz)
#パッケージ読み込み
install.packages("Rgraphviz")
#パッケージ読み込み
install.packages("bnlearn")
#library(Rgraphviz)
library(bnlearn)
help(bnlearn)
install.packages("forecast")
install.packages("ggplot2")
#library(Rgraphviz)
library(bnlearn)
library(forecast)
library(ggplot2)
help(bnlearn)
setwd("~/workspace/machine_learning/bayesian_methods/src")
getwd()
